<!DOCTYPE html>
<html>
<head>
   <link rel=stylesheet href="http://codemirror.net/lib/codemirror.css">
   <link rel=stylesheet href="http://codemirror.net/theme/solarized.css">
   <script src="http://codemirror.net/lib/codemirror.js"></script>
   <script src="http://codemirror.net/mode/ruby/ruby.js"></script>
   <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js"></script>

   <script src="/js/synseer/stats_view.js"></script>
   <style>
     body, html, .content, .CodeMirror {
       margin:  0;
       padding: 0;
       width:  100%;
       height: 100%;
     }

     .currentElement {
       background-color: #00495b; /* solarized dark (#002b36) times 1.7 */
     }

     .CodeMirror {
       padding-top: 1em;
     }
   </style>
</head>

<body>
  <div class="content">
    <div class="stats">
      <div class="time"></div>
      <div class="correct"></div>
      <div class="incorrect"></div>
    </div>
    <textarea class="code"><%= @game.fetch(:body) %></textarea>
  </div>

  <script>
    window.game = (function() {
      'use strict';

      window.Synseer = window.Synseer||{};

      // =====  TraverseAst  =====
      Synseer.TraverseAst = function(ast, cb) {
        this.ast = ast;
        this._cb = cb;
      }
      Synseer.TraverseAst.prototype.successor = function() {
        if(this.ast.children.length == 0) return (this._cb||function(){})();
        return this.ast.children.reduceRight(
          function(cb, childAst) {
            return function() { return new Synseer.TraverseAst(childAst, cb) };
          },
          this._cb
        )()
      }

      // =====  Game  =====
      Synseer.Game = function(attrs) {
        var game         = this;
        this._traverse   = new Synseer.TraverseAst(attrs.ast)
        this._statsView  = attrs.statsView;
        this._codeMirror = attrs.codeMirror;
        this._keyMap     = attrs.keyMap;
        this._onFinished = attrs.onFinished;
        this._isFinished = false;
      }

      Synseer.Game.prototype.init = function() {
        this._initCodeMirror();
        this._statsView.init();
      }

      Synseer.Game.prototype.start = function(getTime, setInterval) {
        this._currentElement  = this._codeMirror.markText({line:0, ch:0},{line:0,ch:5},{className: "currentElement"});
        var game              = this;
        var startTime         = getTime();
        this._timerIntervalId = setInterval(function() {
          var milliseconds = getTime() - startTime;
          var seconds      = parseInt(milliseconds / 1000);
          game._statsView.updateDuration(seconds);
        }, 1000);
      }

      Synseer.Game.prototype.finish = function() {
        this._isFinished = true;
        window.clearInterval(this._timerIntervalId); // TOOD modifies global state
        this._onFinished();
        jQuery.post(window.location.pathname, {"game": this._statsView.data() }); // TODO more global deps
      }

      Synseer.Game.prototype.isFinished = function() {
        return this._isFinished;
      }

      Synseer.Game.prototype.pressKey = function(key) {
        if(this.isFinished()) {
          if(key === 'Enter')
            window.location = window.location.origin;
          return;
        }
        var selectedType = this._keyMap[key];
        var type         = this._traverse.ast.type
        if(selectedType == type) {
          this._statsView.incrementCorrect();
          this._currentElement.clear();
          this._traverse = this._traverse.successor();
          if(this._traverse) {
            var ast = this._traverse.ast;
            this._currentElement = this._codeMirror.markText(
              {line: ast.begin_line, ch: ast.begin_col},
              {line: ast.end_line,   ch: ast.end_col},
              {className: "currentElement"}
            );
          } else {
            this.finish();
          }
        } else {
          this._statsView.incrementIncorrect();
        }
      }

      Synseer.Game.prototype._initCodeMirror = function() {
        // seriously no clue why the interface works this way, it makes no sense to me, and took me forever to figure out >.<
        var game       = this;
        var cmKeyMap   = {call: function(key) { return function() { game.pressKey(key); return "handled"; }}}; // can also return "multi"
        var codeMirror = this._codeMirror;
        codeMirror.setOption("readOnly",                true);
        codeMirror.setOption("cursorBlinkRate",         -1); // hides the cursor
        codeMirror.setOption("disableInput",            true);
        codeMirror.setOption("showCursorWhenSelecting", false);
        codeMirror.setOption("keyMap",                  cmKeyMap);
      }


      // =====  Wire it all together  =====
      var game = new Synseer.Game({
        codeMirror: CodeMirror.fromTextArea(
                      document.getElementsByTagName('textarea')[0],
                      {lineNumbers: true, theme: 'solarized dark', autofocus: true}
                    ),
        statsView:  new Synseer.StatsView(document.getElementsByClassName('stats')[0]),
        ast:        <%= @game.fetch :json_ast %>,
        keyMap:     { S: "send",
                      I: "int",
                    },
        onFinished: function() {
                      var domFinished = document.createElement("div");
                      domFinished.classList.add("summary");
                      var node = document.createTextNode("This is new.");
                      domFinished.appendChild(node);
                      document.getElementsByTagName('body')[0].appendChild(domFinished);
                    }
      });

      game.init();
      return game;
    })();

    game.start(function() { return new Date() }, setInterval);
  </script>
</div>
</body>
</html>
