<!DOCTYPE html>
<html>
<head>
   <link rel=stylesheet href="/css/reset.css">
   <link rel=stylesheet href="/css/synseer/main.css">
   <link rel=stylesheet href="/codemirror/lib/codemirror.css">
   <link rel=stylesheet href="/codemirror/theme/base16-light.css">

   <script src="/codemirror/lib/codemirror.js"></script>
   <script src="/codemirror/mode/ruby/ruby.js"></script>
   <script src="/js/jquery.js"></script>
   <script src="/js/synseer.js"></script>
   <script src="/js/mousetrap.js"></script>

   <style>
     body, html, .content, .layer, .CodeMirror {
       margin:  0;
       padding: 0;
       width:   100%;
       height:  100%;
     }

     .positive_reinforcement {
       -webkit-animation-duration:  2s;
       -moz-animation-duration:     2s;
       -o-animation-duration:       2s;
       animation-duration:          2s;

       -webkit-animation-name:      positive_reinforcement;
       -moz-animation-name:         positive_reinforcement;
       -o-animation-name:           positive_reinforcement;
       animation-name:              positive_reinforcement;

       -webkit-animation-fill-mode: backwards;
       -moz-animation-fill-mode:    backwards;
       -o-animation-fill-mode:      backwards;
       animation-fill-mode:         backwards;
     }
     @-webkit-keyframes positive_reinforcement {
       from { background-color: rgb(101, 153, 51); }
       to { }
     }
     @-moz-keyframes positive_reinforcement {
       from { background-color: rgb(101, 153, 51); }
       to { }
     }
     @-o-keyframes positive_reinforcement {
       from { background-color: rgb(101, 153, 51); }
       to { }
     }
     @keyframes positive_reinforcement {
       from { background-color: rgb(101, 153, 51); }
       to { }
     }

     .negative_reinforcement {
       -webkit-animation-duration:  2s;
       -moz-animation-duration:     2s;
       -o-animation-duration:       2s;
       animation-duration:          2s;

       -webkit-animation-name:      negative_reinforcement;
       -moz-animation-name:         negative_reinforcement;
       -o-animation-name:           negative_reinforcement;
       animation-name:              negative_reinforcement;

       -webkit-animation-fill-mode: backwards;
       -moz-animation-fill-mode:    backwards;
       -o-animation-fill-mode:      backwards;
       animation-fill-mode:         backwards;
     }
     @-webkit-keyframes negative_reinforcement {
       from { background-color: #F00; }
       to { }
     }
     @-moz-keyframes negative_reinforcement {
       from { background-color: #F00; }
       to { }
     }
     @-o-keyframes negative_reinforcement {
       from { background-color: #F00; }
       to { }
     }
     @keyframes negative_reinforcement {
       from { background-color: #F00; }
       to { }
     }



     .postgame_info_container {
       position:     absolute;
       z-index:      10;
       width:        100%;
       padding-top:  10em;
     }
     .postgame_info {
       display:        block;
       width:          25em;
       padding:        1em;
       text-align:     center;
       margin-left:    auto;
       margin-right:   auto;

       border-radius:  0.3em;
       font-weight:    bold;
       font-size:      1.25em;
       color:          #6B2A05;
       background:     rgba(170, 98, 57, 0.4); /* primary0 */
     }
     .postgame_info .summary {
       padding-bottom: 0.5em;
       border-bottom:  2px solid #C98660; /* $color-primary-2 */
     }
     .postgame_info .options {
       padding-top: 0.5em;
     }

     .CodeMirror {
       padding:     1em;
       font-size:   1.5em;
     }

     .layer .CodeMirror-scroll { overflow: hidden !important; } /* They try really hard to put this there, so I have to use more specificity
                                                                   to remove it. Supposedly this will break things, but when I don't have it,
                                                                   it has big white bars (I assume these are scrollbars) along the bottom,
                                                                   as if the div were mis-aligned. */
     .currentElement { background: #d0c7a7; }                   /* mix($color-secondary-2-0, lighten($color-primary-0, 40%), 20%); */
     .cake .layer .CodeMirror { background: #ebd2c4; }
     .cake .layer .CodeMirror-gutters { background: #ebd2c4; }
     .side { width: 10em; } /* actually, it's the user_entry that determines this */
     .keymap_status .user_entry {
       width: 20em;
     }

     .cake .cm-s-base16-light span.cm-string { color: #aa759f; }
   </style>
</head>

<body>
  <div class="content">

    <div class="icing">
      <a class="app_name" href="/">Synseer</a>
      <div class="total_score stats">
        <span class="stat">
          <span class="games_completed"></span>
          Completed
        </span>

        <span class="stat">
          <span class="correct"></span>
          Correct
        </span>

        <span class="stat">
          <span class="incorrect"></span>
          Incorrect
        </span>

        <span class="stat">
          <span class="time"></span>
          Total Time
        </span>
      </div>
    </div>

    <div class="cake game-board">
      <div class="layer">

        <div class="postgame_info_container">
          <div class="postgame_info">
            <div class="summary"></div>
            <div class="options">"Enter" goes to the index, "r" replays this game.</div>
          </div>
        </div>

        <div class="side"></div>
        <div class="col">
          <div class="infoBox">
            Type the characters you think match the description
            of the highlighted poriton.
          </div>
          <textarea class="cm"><%= @game.fetch(:body) %></textarea>
        </div>
      </div>
    </div>

  </div>

  <script>
    (function() {
      'use strict';

      document.body.onload = playGame;

      // -----  init/load the data from localstorage  -----
      var appState = {games: []};
      if(localStorage.appState === undefined)
        localStorage.appState = JSON.stringify(appState);
      else
        appState = JSON.parse(localStorage.appState);

      // -----  InfoBox  -----
      var infoBox= document.querySelector('.infoBox');

      // -----  Keymap  -----
      var Mousetrap = require('mousetrap');
      var mousetrap = new Mousetrap(document);
      mousetrap.handleKey = function(character, modifiers, event) {
        if(event.type !== 'keyup') return;
        if(modifiers.includes("shift"))
          character = "shift-"+character;

        console.log(character, modifiers);

        if(window.game && !window.game.isFinished())
          window.game.pressKey(character);
        else if(character == 'r')
          playGame();
        else if(character == 'enter')
          returnToIndex();
      }

      // -----  CodeMirror  -----
      var cm = CodeMirror.fromTextArea(
        document.querySelector('textarea.cm'),
        { lineNumbers:    true,
          theme:          'base16-light',
          autofocus:      true,
          scrollbarStyle: "null",
        }
      )

      // don't hijack my keys!
      function ignoreEvent(x, e) { e.codemirrorIgnore = true; }
      cm.on("keydown",  ignoreEvent);
      cm.on("keypress", ignoreEvent);
      cm.on("keyup",    ignoreEvent);


      // -----  Reusable Game Objects  -----
      var Synseer       = require('synseer');
      var KeymapStatus  = require('synseer/keymap_status');
      var statsView     = new Synseer.StatsView(document.querySelector('.stats'));
      var postgame_info = document.querySelector('.postgame_info');
      var summary       = postgame_info.querySelector('.summary');
      var keymapStatus = new KeymapStatus(document.querySelector('.side'))

      // -----  Functions  -----
      function returnToIndex() {
        window.location = window.location.origin;
      }

      function playGame() {
        postgame_info.style.display = 'none';

        var game = new Synseer.Game({
          codeMirror:      cm,
          statsView:       statsView,
          ast:             <%= @game.fetch :json_ast %>,
          keyMap:          new Synseer.KeyMapper(Synseer.DefaultKeybindings),
          onPossibilities: function(possibilities) {
                             keymapStatus.update('probably delete this thing', possibilities);
                           },
          setMessage:      function(message, type) {
                             infoBox.innerText = message;
                             infoBox.classList.remove('negative_reinforcement');
                             infoBox.classList.remove('positive_reinforcement');

                             // not sure why we need the set timeout but it has no transition if we don't
                             setTimeout(function() {
                               if(type === 'negative') {
                                 infoBox.classList.add('negative_reinforcement')
                               } else if(type === 'positive') {
                                 infoBox.classList.add('positive_reinforcement')
                               }
                             }, 0);
                           },
          onFinished:      function(stats) {
                             summary.innerText = 'Summary: ' + stats.duration + ' seconds, ' + stats.numCorrect + ' correct, ' + stats.numIncorrect + ' incorrect';
                             postgame_info.style.display = 'block';

                             // save the data
                             var gameData        = stats;
                             gameData.id         = <%= @game.fetch(:id).inspect %>;
                             gameData.name       = <%= @game.fetch(:name).inspect %>;
                             appState.games.push(gameData);
                             appState.lastPlayed = gameData.id
                             localStorage.appState = JSON.stringify(appState);
                           },
        });
        window.game = game;
        game.init();
        game.start(function() { return new Date() }, setInterval);
      }
    })()
  </script>
</div>
</body>
</html>
