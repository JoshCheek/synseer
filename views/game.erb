<!DOCTYPE html>
<html>
<head>
   <link rel=stylesheet href="http://codemirror.net/lib/codemirror.css">
   <link rel=stylesheet href="http://codemirror.net/theme/solarized.css">
   <script src="http://codemirror.net/lib/codemirror.js"></script>
   <script src="http://codemirror.net/mode/ruby/ruby.js"></script>
   <style>
     body, html, .content, .CodeMirror {
       margin:  0;
       padding: 0;
       width:  100%;
       height: 100%;
     }

     .currentElement {
       background-color: #00495b; /* solarized dark (#002b36) times 1.7 */
     }

     .CodeMirror {
       padding-top: 1em;
     }
   </style>
</head>

<body>
  <div class="content">
    <div class="stats">
      <div class="time"></div>
      <div class="correct"></div>
    </div>
    <textarea class="code"><%= @game.fetch(:body) %></textarea>
  </div>

  <script>
    window.cm = (function() {
      'use strict';

      var SyntaxSpray = {};

      // StatsView
      SyntaxSpray.StatsView = function(domElement) {
        this.domElement     = domElement;
        this.domCorrect = domElement.getElementsByClassName('correct')[0];
        this.domTime    = domElement.getElementsByClassName('time')[0];
      }

      SyntaxSpray.StatsView.prototype.init = function(time) {
        this._startTime = time;
        this.updateTime(time);
        this._numCorrect = -1;
        this.incrementCorrect();
      }

      SyntaxSpray.StatsView.prototype.updateTime = function(time) {
        this.domTime.textContent = this.formatDuration(time - this._startTime);
      }

      SyntaxSpray.StatsView.prototype.formatDuration = function(millisecondsElapsed) {
        var totalSecondsElapsed = parseInt(millisecondsElapsed / 1000);
        var secondsElapsed      = totalSecondsElapsed % 60;
        var minutesElapsed      = parseInt(totalSecondsElapsed / 60);
        return "" + minutesElapsed + ":" + (secondsElapsed > 9 ? parseInt(secondsElapsed / 10) : "0") + (secondsElapsed % 10); // JS apparently has no sprintf or rjust
      }

      SyntaxSpray.StatsView.prototype.incrementCorrect = function() {
        this._numCorrect++;
        this.domCorrect.textContent = this._numCorrect;
      }

      var stats = new SyntaxSpray.StatsView(document.getElementsByClassName('stats')[0]);
      stats.init(new Date());

      // Fake playing the game
      var handleKeypress = function(key, cm) {
        // seriously no clue why the interface works this way, it makes no sense to me, and took me forever to figure out >.<
        return function() {
          stats.incrementCorrect();
          currentElement.clear();
          currentElement = cm.markText({line:0, ch:0},{line:0,ch:1},{className: "currentElement"});
          return "handled";
        };
      }

      // Init CodeMirror
      var cm = CodeMirror.fromTextArea(document.getElementsByTagName('textarea')[0], {
        lineNumbers:             true,
        theme:                   'solarized dark',
        readOnly:                true,
        cursorBlinkRate:         -1, // hides the cursor
        disableInput:            true,
        showCursorWhenSelecting: false,
        autofocus:               true,
        keyMap:                  {call: handleKeypress},
      });
      var currentElement = currentElement = cm.markText({line:0, ch:0},{line:0,ch:5},{className: "currentElement"});


      // Init timer
      var ast   = <%= @game.fetch(:json_ast) %>;
      setInterval(function() { stats.updateTime(new Date()) }, 1000);
      return cm;
    })();
  </script>
</div>
</body>
</html>
