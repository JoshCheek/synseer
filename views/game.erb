<!DOCTYPE html>
<html>
<head>
   <link rel=stylesheet href="http://codemirror.net/lib/codemirror.css">
   <link rel=stylesheet href="http://codemirror.net/theme/solarized.css">
   <script src="/js/dependencies.js"></script>
   <script src="public/js/synseer.js"></script>

   <style>
     body, html, .content, .CodeMirror {
       margin:  0;
       padding: 0;
       width:  100%;
       height: 100%;
     }

     .currentElement {
       background-color: #00495b; /* solarized dark (#002b36) times 1.7 */
     }

     .CodeMirror {
       padding-top: 1em;
     }
   </style>
</head>

<body>
  <div class="content">
    <div id="stats">
    </div>

    <textarea class="code"><%= @game.fetch(:body) %></textarea>
  </div>

  <script src="/js/synseer.js"></script>

  <script>
    window.game = (function() {
      // Make the component on .game
      // Pass the game:
      //   dispatcher
      //   codemirror
      //   ast
      //   keymap
      //   onFinished
      // call start on the game
      //   it dispatches currentElement with data
      //     { type:       ast.type,
      //       begin_line: ast.begin_line,
      //       begin_col:  ast.begin_col,
      //       end_line:   ast.end_line,
      //       end_col:    ast.end_col,
      //     }
      // the component for codemirror listens for currentElement and sets
      //   if(this._currentElement) { _currentElement.clear() }
      //   this._currentElement = this._codeMirror.markText(
      //     {line: data.begin_line, ch: data.begin_col},
      //     {line: data.end_line,   ch: data.end_col},
      //     {className: "currentElement"}
      //   );
      // the component for codemirror registers for key events
      //   on keypress event, it dispatches
      //   keypressed
      // the game listens for keypressed
      //   passes it into the keymap
      //   gets back the array of results
      //   if the array contains one element
      //     and the element is correct
      //       it emits correctGuess
      //       it emits currentElement
      //       it advances to the next ast
      //       if there is no next ast
      //         it emits the finished event
      'use strict';

      var component = ReactDOM.render(
        React.createElement(Synseer.Stats, null),
        document.getElementById('stats')
      );

      var game = new Synseer.Game({
        codeMirror: CodeMirror.fromTextArea(
                      document.getElementsByTagName('textarea')[0],
                      {lineNumbers: true, theme: 'solarized dark', autofocus: true}
                    ),
        ast:        <%= @game.fetch :json_ast %>,
        keyMap:     Synseer.DefaultKeymap,
        onFinished: function() {
                      var domFinished = document.createElement("div");
                      domFinished.classList.add("summary");
                      var node = document.createTextNode("This is new.");
                      domFinished.appendChild(node);
                      document.getElementsByTagName('body')[0].appendChild(domFinished);
                      jQuery.post(window.location.pathname, {"game": component.state});
                    }
      });

      game.init();
      return game;

      // load the data from localstorage
      var appState = {games: []};
      if(window.location.protocol !== 'file:') {
        if(localStorage.appState === 'undefined')
          localStorage.appState = appState;
        else
          appState = localStorage.appState;
      }

      // some fake data
      appState.games.push({
        name: "game 1",
        correct: 3,
        incorrect: 2,
        duration: 61});

      var integration = require("browser_integration");
      integration.game(
        document.getElementById('stats')
        document.getElementById('game'),
        appState.games[0]
      );

      document.getElementsByClassName('playGame')[0].focus();
    })();
    game.start(function() { return new Date() }, setInterval);
  </script>
</div>
</body>
</html>
